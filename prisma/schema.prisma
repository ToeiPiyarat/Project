// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Search {
  id    Int    @id @default(autoincrement())
  name  String
  count Int
  user  User[]
}

enum Role {
  USER
  ADMIN
}

enum RefundType {
  BANK
}

model Sing {
  id       Int    @id @default(autoincrement())
  username String @map("user_name")
  password String
  email    String @unique
  phone    String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   Int    @unique @map("user_id")
  login    Login  @relation(fields: [loginId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  loginId  Int    @unique @map("login _id")
}

model Login {
  id       Int    @id @default(autoincrement())
  username String @map("user_name")
  password String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   Int    @unique @map("user_id")
  sing     Sing?
}

model User {
  id       Int         @id @default(autoincrement())
  role     Role        @default(USER)
  name     String
  password String
  email    String      @unique
  phone    String?
  refund   RefundType?
  products Product[]
  cart     Cart?
  orders   Order[]
  search   Search[]
  storage  Storage[]
  sing     Sing?
  login    Login?
}

model Cart {
  id               Int     @id @default(autoincrement())
  numberofproducts Int     @default(0) @map("number_of_products")
  total            Int     @default(0)
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           Int     @unique @map("user_id")
  product          Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId        Int     @unique @map("product_id")
}

model Order {
  id               Int       @id @default(autoincrement())
  numberofproducts Int       @default(0) @map("number_of_products")
  orderdate        DateTime  @default(now()) @map("order_date")
  total            Int       @default(0)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId           Int       @map("user_id")
  product          Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId        Int       @map("product_id")
  Storage          Storage[]
}

model Storage {
  id       Int   @id @default(autoincrement())
  product  Int   @default(0)
  quantity Int   @default(1)
  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   Int   @map("user_id")
  order    Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId  Int   @map("order_id")
}

model Product {
  id            Int           @id @default(autoincrement())
  title         String
  detail        String
  releaseDate   Int           @map("release_date")
  numberOfPages Int           @map("number_of_pages")
  price         Int
  comment       String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId        Int           @map("user_id")
  product_imgs  Product_Img[]
  category      Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId    Int
  author_name   Author_Name   @relation(fields: [author_nameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  author_nameId Int           @map("author_name_id")
  cart          Cart[]
  order         Order[]
}

model Product_Img {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map("product_id")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  count    Int       @default(0)
  products Product[]
}

model Author_Name {
  id       Int       @id @default(autoincrement())
  name     String
  count    Int       @default(0)
  products Product[]
}
